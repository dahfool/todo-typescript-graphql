import { NameNode, TypeNode, NamedTypeNode, GraphQLObjectType, GraphQLNonNull, GraphQLList, GraphQLOutputType, GraphQLNamedType, GraphQLSchema } from 'graphql';
import { ScalarsMap } from './types';
export declare const getConfigValue: <T = any>(value: T, defaultValue: T) => T;
export declare function getBaseType(type: GraphQLOutputType): GraphQLNamedType;
export declare function quoteIfNeeded(array: string[], joinWith?: string): string;
export declare function block(array: any): string;
export declare function wrapWithSingleQuotes(str: string | NameNode): string;
export declare function breakLine(str: string): string;
export declare function indent(str: string, count?: number): string;
export interface DeclarationBlockConfig {
    blockWrapper?: string;
    blockTransformer?: (block: string) => string;
    enumNameValueSeparator?: string;
}
export declare class DeclarationBlock {
    private _config;
    _export: boolean;
    _name: any;
    _kind: any;
    _methodName: any;
    _content: any;
    _block: any;
    _nameGenerics: any;
    constructor(_config: DeclarationBlockConfig);
    export(exp?: boolean): DeclarationBlock;
    asKind(kind: any): DeclarationBlock;
    withMethodCall(methodName: string): DeclarationBlock;
    withBlock(block: string): DeclarationBlock;
    withContent(content: string): DeclarationBlock;
    withName(name: string | NameNode, generics?: string | null): DeclarationBlock;
    readonly string: string;
}
export declare function getBaseTypeNode(typeNode: TypeNode): NamedTypeNode;
export declare function toPascalCase(str: string): string;
export declare const wrapTypeWithModifiers: (prefix?: string) => (baseType: string, type: GraphQLObjectType<any, any, {
    [key: string]: any;
}> | GraphQLNonNull<GraphQLObjectType<any, any, {
    [key: string]: any;
}>> | GraphQLList<GraphQLObjectType<any, any, {
    [key: string]: any;
}>>) => string;
export declare function buildScalars(schema: GraphQLSchema, scalarsMapping: ScalarsMap): ScalarsMap;
