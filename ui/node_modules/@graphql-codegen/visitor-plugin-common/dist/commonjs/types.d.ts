import { ASTNode } from 'graphql';
export declare type ScalarsMap = {
    [name: string]: string;
};
export declare type EnumValuesMap = {
    [key: string]: string;
};
export declare type ConvertNameFn<T = {}> = ConvertFn<T>;
export interface ConvertOptions {
    prefix?: string;
    suffix?: string;
}
export declare type ConvertFn<T = {}> = (node: ASTNode | string, options?: ConvertOptions & T) => string;
export declare type NamingConventionResolvePath = string;
export declare type NamingConvention = string | NamingConventionMap;
export interface NamingConventionMap {
    enumValues?: 'keep' | NamingConventionResolvePath | Function;
    typeNames?: 'keep' | NamingConventionResolvePath | Function;
}
