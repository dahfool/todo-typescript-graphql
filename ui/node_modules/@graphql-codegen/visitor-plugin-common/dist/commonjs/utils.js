"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const graphql_1 = require("graphql");
function isWrapperType(t) {
    return graphql_1.isListType(t) || graphql_1.isNonNullType(t);
}
exports.getConfigValue = (value, defaultValue) => {
    if (value === null || value === undefined) {
        return defaultValue;
    }
    return value;
};
function getBaseType(type) {
    if (isWrapperType(type)) {
        return getBaseType(type.ofType);
    }
    else {
        return type;
    }
}
exports.getBaseType = getBaseType;
function quoteIfNeeded(array, joinWith = ' & ') {
    if (array.length === 0) {
        return '';
    }
    else if (array.length === 1) {
        return array[0];
    }
    else {
        return `(${array.join(joinWith)})`;
    }
}
exports.quoteIfNeeded = quoteIfNeeded;
function block(array) {
    return array && array.length !== 0 ? '{\n' + array.join('\n') + '\n}' : '';
}
exports.block = block;
function wrapWithSingleQuotes(str) {
    return `'${str}'`;
}
exports.wrapWithSingleQuotes = wrapWithSingleQuotes;
function breakLine(str) {
    return str + '\n';
}
exports.breakLine = breakLine;
function indent(str, count = 1) {
    return new Array(count).fill('  ').join('') + str;
}
exports.indent = indent;
class DeclarationBlock {
    constructor(_config) {
        this._config = _config;
        this._export = false;
        this._name = null;
        this._kind = null;
        this._methodName = null;
        this._content = null;
        this._block = null;
        this._nameGenerics = null;
        this._config = Object.assign({ blockWrapper: '', blockTransformer: block => block, enumNameValueSeparator: ':' }, this._config);
    }
    export(exp = true) {
        this._export = exp;
        return this;
    }
    asKind(kind) {
        this._kind = kind;
        return this;
    }
    withMethodCall(methodName) {
        this._methodName = methodName;
        return this;
    }
    withBlock(block) {
        this._block = block;
        return this;
    }
    withContent(content) {
        this._content = content;
        return this;
    }
    withName(name, generics = null) {
        this._name = name;
        this._nameGenerics = generics;
        return this;
    }
    get string() {
        let result = '';
        if (this._export) {
            result += 'export ';
        }
        if (this._kind) {
            let extra = '';
            let name = '';
            if (['type', 'const', 'var', 'let'].includes(this._kind)) {
                extra = '= ';
            }
            if (this._name) {
                name = this._name + (this._nameGenerics || '') + ' ';
            }
            result += this._kind + ' ' + name + extra;
        }
        if (this._block) {
            if (this._content) {
                result += this._content;
            }
            const before = '{' + this._config.blockWrapper;
            const after = this._config.blockWrapper + '}';
            const block = [before, this._block, after].join('\n');
            if (this._methodName) {
                result += `${this._methodName}(${this._config.blockTransformer(block)})`;
            }
            else {
                result += this._config.blockTransformer(block);
            }
        }
        else if (this._content) {
            result += this._content;
        }
        else if (this._kind) {
            result += '{}';
        }
        return result + (this._kind === 'interface' || this._kind === 'enum' ? '' : ';') + '\n';
    }
}
exports.DeclarationBlock = DeclarationBlock;
function getBaseTypeNode(typeNode) {
    if (typeNode.kind === graphql_1.Kind.LIST_TYPE || typeNode.kind === graphql_1.Kind.NON_NULL_TYPE) {
        return getBaseTypeNode(typeNode.type);
    }
    return typeNode;
}
exports.getBaseTypeNode = getBaseTypeNode;
function toPascalCase(str) {
    return str
        .split('_')
        .map(s => change_case_1.pascalCase(s))
        .join('_');
}
exports.toPascalCase = toPascalCase;
exports.wrapTypeWithModifiers = (prefix = '') => (baseType, type) => {
    if (graphql_1.isNonNullType(type)) {
        return exports.wrapTypeWithModifiers(prefix)(baseType, type.ofType).substr(1);
    }
    else if (graphql_1.isListType(type)) {
        const innerType = exports.wrapTypeWithModifiers(prefix)(baseType, type.ofType);
        return `${prefix}Array<${innerType}>`;
    }
    else {
        return `${prefix}${baseType}`;
    }
};
function buildScalars(schema, scalarsMapping) {
    const typeMap = schema.getTypeMap();
    let result = Object.assign({}, scalarsMapping);
    Object.keys(typeMap)
        .map(typeName => typeMap[typeName])
        .filter(type => graphql_1.isScalarType(type))
        .map((scalarType) => {
        const name = scalarType.name;
        const value = scalarsMapping[name] || 'any';
        result[name] = value;
    });
    return result;
}
exports.buildScalars = buildScalars;
//# sourceMappingURL=utils.js.map